// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package gen

import (
	"context"
	"database/sql"
)

const getAllSent = `-- name: GetAllSent :many
SELECT message_id, sent_at
FROM message
WHERE sent_at NOTNULL
ORDER BY created_at
`

type GetAllSentRow struct {
	MessageID sql.NullString
	SentAt    sql.NullTime
}

func (q *Queries) GetAllSent(ctx context.Context) ([]GetAllSentRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSentRow
	for rows.Next() {
		var i GetAllSentRow
		if err := rows.Scan(&i.MessageID, &i.SentAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnsent = `-- name: GetAllUnsent :many
SELECT id, recipient, content
FROM message
WHERE sent_at IS NULL
ORDER BY created_at
`

type GetAllUnsentRow struct {
	ID        int32
	Recipient string
	Content   string
}

func (q *Queries) GetAllUnsent(ctx context.Context) ([]GetAllUnsentRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUnsent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnsentRow
	for rows.Next() {
		var i GetAllUnsentRow
		if err := rows.Scan(&i.ID, &i.Recipient, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextUnsent = `-- name: GetNextUnsent :one
SELECT id, recipient, content
FROM message
WHERE sent_at IS NULL
ORDER BY created_at
LIMIT 1
`

type GetNextUnsentRow struct {
	ID        int32
	Recipient string
	Content   string
}

func (q *Queries) GetNextUnsent(ctx context.Context) (GetNextUnsentRow, error) {
	row := q.db.QueryRowContext(ctx, getNextUnsent)
	var i GetNextUnsentRow
	err := row.Scan(&i.ID, &i.Recipient, &i.Content)
	return i, err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO message (recipient, content)
VALUES ($1, $2)
`

type InsertMessageParams struct {
	Recipient string
	Content   string
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage, arg.Recipient, arg.Content)
	return err
}

const setMessageSent = `-- name: SetMessageSent :exec
UPDATE message
SET message_id = $2,
    sent_at    = $3
WHERE id = $1
`

type SetMessageSentParams struct {
	ID        int32
	MessageID sql.NullString
	SentAt    sql.NullTime
}

func (q *Queries) SetMessageSent(ctx context.Context, arg SetMessageSentParams) error {
	_, err := q.db.ExecContext(ctx, setMessageSent, arg.ID, arg.MessageID, arg.SentAt)
	return err
}
